Session1
--------
Simple Hello World! from HTML
simple Hello World! from JS
simple Hello World! from React
See Z_index-hello.html

Session2
--------
Igniting the APP
React Production ready APP
Lot of other packages make our react app fast
npm - no full form - manages packages - not stands for node package manager
 
> npm init 

            package name: (myreact)
            version: (1.0.0)
            description: This is MY React learnings.
            entry point: (App.js)
            test command: jest
            git repository: (https://github.com/dharanip18/React.git)
            keywords: react , dharani, myreact
            author: Dharani
            license: (ISC)
            About to write to E:\PREP\React\MyReact\package.json:

            {
            "name": "myreact",
            "version": "1.0.0",
            "description": "This is MY React learnings.",
            "main": "App.js",
            "scripts": {
                "test": "jest"
            },
            "repository": {
                "type": "git",
                "url": "git+https://github.com/dharanip18/React.git"
            },
            "keywords": [
                "react",
                "dharani",
                "myreact"
                ],
            "author": "Dharani",
            "license": "ISC",
            "bugs": {
                "url": "https://github.com/dharanip18/React/issues"
            },
            "homepage": "https://github.com/dharanip18/React#readme"
            }

package.json file is created.
    -It is the configuration for npm
    -This is also known as dependencies

Install dependencies
  Bundler - our whole code needs to be 
                bundled,
                minified,
                cached,
                cleaned
 webpack,parcel,etc


> npm install -D parcel
 -D dev dependencies
 other normal dependencies

 ~ and ^ package name 
 2.8.3 - 2.8.4 ^ minor update
 2.8.3 - 3.0.0 ~ major update

package.json - it is the configuration for npm - it keeps track of what version of package is installed in your system
package-lock.json - keeps track of exact version that being installed

integrity - hash

node_modules - we shouldn't push to github/Production - put it inside .gitignore

we must push both package.json and package-lock.json - it will generate the node_modules 

ignite our app 
--------------
> npx parcel index.html

npx packagename 
npx - execute a package

install react as normal dependency
> npm i react
> npm i react-dom

Now remove cdn and import react and react-dom
getting error? that is because js is treating as normal js not a node_modules specify type="module" will resolve

#parcel uses other libraries for doing minification,img optimization
create a Dev build
         Local server
         automatically refreshing the page - HMR - Hot module replacement
         uses file watching algorithm - written in cpp
         Caching - Faster builds - .parcel-cache
         Image Optimization
         Minification
         Bundling
         Compress
         Consistent Hashing - It keeps track of all code
         Code spliting
         Differential Bundling - App opens in IE,Chrome, Mobile browsers, Older browsers
         Diagnostic
         Error Handling
         https
         Tree shaking - remove unused code
         Different dev and prod bundler
Goto Parcel documentation


Prod build
> npx parcel build index.html 
build failed? remove main from package.json

browserList in package.json supports the specific browsers

Session3
--------

Instead of npx parcel index.html - we can create a script to start/run the dev project
  "scripts": {
    "start":"parcel index.html", // for dev 
    "build":"parcel build index.html", //for prod
  }
 run the script - npm run [name of script]
 > npm run start or npm start (means calling npm run start(means npx parcel index.html))
 > npm run build not (npm build)

 Fundamentals of React

 React Elements
 creating nested react elements with React.createElement is difficult for developers - here comes JSX into picture

 JSX -Is not a HTML inside JS 
     -HTML/XML Like syntax

const jsxHeading = <h1 id="heading">This is from JSX</h1>;

This is not a valid JS. JSEngine will not understand the above code. Parcel is doing the transpilation before it reaches to the JSEngine.
Babel is doing transpilation. Parcel manages babel

JSEngine will understand only Ecma script

JSX(transpiled before it reaches the JS) - Parcel - Babel

React.createElement => ReactElement -JS Object => HTMLElement(render)
JSX => React.createElement => ReactElement -JS Object => HTMLElement(render)

React Components
    -Class Based Component(old way)
    -Functional Component (new way)
        Functional Component - always start with CaptialLetter - function returning ReactElement / JSX is functional component

        const Fn = () = true;
       
        const Fn1 = () => {
            return true;
        }

        const element = (
            <span>This is React Element</span>
        )

        const element = (
            <div id="container">
            {element}
            </div>
        )

cross site scripting - attacker sends some malicious data -jsx will take care

 {} - run any js code  
    {number}
    <Title></Title>
    <Title />
    {Title()}


Session4
--------
Food Ordering APP 

const RestaurantCard = () = {
    return(
        <div className="res-card">
        <img src="" />
        <h3>ResName</h3>
        <h4>Cusines</h4>
        <h4>rating</h4>
        <h4>distance</h4>
        </div>
    )
}

const Restaurant = () =>{
    return(
        <div className="res-con">
            <RestaurantCard/>
            <RestaurantCard/>
            <RestaurantCard/>
        </div>
    )
}

root.render(<Restaurant />)

pass Dynamic data
----------------

const Restaurant = () =>{
    return(
        <div className="res-con">
            <RestaurantCard name="Ibacco" cusines="IceCream, Shakes"/>
            <RestaurantCard name="FB Cakes" cusines="Cake, Brownie"/>
            <RestaurantCard name="Juice Cart" cusines="Fresh Juice, Malts, Cool Drinks"/>
        </div>
    )
}

//default way
const RestaurantCard = (props) = {
    return(
        <div className="res-card">
        <img src="" />
        <h3>{props.name}</h3>
        <h4>{props.cusines}</h4>
        <h4>rating</h4>
        <h4>distance</h4>
        </div>
    )
}

//object destructing
const RestaurantCard = (props) = {
    const {name,cusines} = props;
    return(
        <div className="res-card">
        <img src="" />
        <h3>{name}</h3>
        <h4>{cusines}</h4>
        <h4>rating</h4>
        <h4>distance</h4>
        </div>
    )
}

//destructing on fly
const RestaurantCard = ({name,cusines}) = {
    return(
        <div className="res-card">
        <img src="" />
        <h3>{name}</h3>
        <h4>{cusines}</h4>
        <h4>rating</h4>
        <h4>distance</h4>
        </div>
    )
}
root.render(<Restaurant />)

Config driven UI
----------------
UI is based on configuration
Open Swiggy - Im in chennai - I see the Offers carousel
what if Im in bangalore,mumbai,pune?
I will see different offers based on locations or there were no offers at all
The UI is driven by configuration of data


Key - every component must have key for unique idenfication but that should be indexes

no key(not acceptable) <<<<<<< index as key <<<<<<< unique key(best Practice)